[gd_scene load_steps=25 format=2]

[ext_resource path="res://Player.tscn" type="PackedScene" id=1]
[ext_resource path="res://Art/WhitePixel.png" type="Texture" id=2]
[ext_resource path="res://PlatformCollider.tscn" type="PackedScene" id=3]
[ext_resource path="res://Spawner.tscn" type="PackedScene" id=4]
[ext_resource path="res://Art/SunRay.png" type="Texture" id=5]
[ext_resource path="res://Art/Sun.png" type="Texture" id=6]
[ext_resource path="res://Art/Umbrella.png" type="Texture" id=7]
[ext_resource path="res://Art/SandFloor.png" type="Texture" id=8]
[ext_resource path="res://Art/ParallaxBackground.png" type="Texture" id=9]
[ext_resource path="res://Art/Player1.png" type="Texture" id=10]
[ext_resource path="res://Art/Player2.png" type="Texture" id=11]
[ext_resource path="res://Sound/Running_at_the_Sun.mp3" type="AudioStream" id=12]

[sub_resource type="GDScript" id=2]
resource_name = "PlayerTracker"
script/source = "extends Node2D


onready var _player = get_node(\"../Player\")

func _process(delta):
	self.position = Vector2(0, _player.position.y)
"

[sub_resource type="AnimatedTexture" id=3]

[sub_resource type="GDScript" id=9]
resource_name = "ProgressBar"
script/source = "extends Sprite

const start : Vector2 = Vector2(-428,245)
const end : Vector2 = Vector2(-428,-195)

onready var player = get_node(\"../../Player\")

func _ready():
	$ManHUD.play(\"ManRun\")
	$SunHUD.play(\"SunRotate\")
	print(\"akdgbakjbg\");

func _process(delta):
	self.position = lerp(start, end, player.distance / player.END_DISTANCE)
"

[sub_resource type="Animation" id=10]
resource_name = "ManRun"
length = 0.6
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath(".:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.3 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ ExtResource( 10 ), ExtResource( 11 ) ]
}

[sub_resource type="Animation" id=11]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath(".:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ ExtResource( 10 ) ]
}

[sub_resource type="Animation" id=12]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("../Sun/Rays:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ 0.0 ]
}

[sub_resource type="Animation" id=13]
resource_name = "SunRotate"
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("../Sun/Rays:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 1 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0 ]
}

[sub_resource type="GDScript" id=8]
script/source = "extends Label

onready var player = get_node(\"../../Player\");

func _process(delta):
	if player.distance < player.END_DISTANCE: 
		GlobalTimer.time += delta
	
	var mils = fmod(GlobalTimer.time,1)*1000
	var secs = fmod(GlobalTimer.time,60)
	var mins = fmod(GlobalTimer.time, 60*60) / 60
	var hr = fmod(fmod(GlobalTimer.time,3600 * 60) / 3600,24)
	
	var time_passed = \"%02d : %02d : %02d : %03d\" % [hr,mins,secs,mils]
	text = time_passed# + \" : \" + var2str(time)
	
	pass
"

[sub_resource type="GDScript" id=4]
script/source = "extends Sprite

onready var _player = get_node(\"../../../Player\")

func _process(delta):
	self.modulate = lerp(Color(\"72fffe\"), Color.black, min(_player.distance / 30000, 1))
	pass
"

[sub_resource type="GDScript" id=7]
script/source = "extends Sprite

onready var _player = get_node(\"../../../../Player\")

func _process(delta):
	self.modulate = lerp(Color.transparent, Color.white, min(float(_player.distance > 10000), min(_player.distance / 45000, 1)) )
	pass
"

[sub_resource type="GDScript" id=6]
resource_name = "Despawner"
script/source = "extends Area2D


# Declare member variables here. Examples:
# var a = 2
# var b = \"text\"


# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
#func _process(delta):
#	pass


func _on_Despawner_area_entered(area):
	area.queue_free()


func _on_Despawner_body_entered(body):
	body.get_parent().queue_free()
"

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 391.5, 52 )

[node name="Node2D" type="Node2D"]

[node name="PlayerTracker" type="Node2D" parent="."]
script = SubResource( 2 )

[node name="LeftMargin" type="Sprite" parent="PlayerTracker"]
self_modulate = Color( 0.372549, 0.372549, 0.372549, 1 )
position = Vector2( -426, 0 )
scale = Vector2( 171.537, 604.775 )
texture = ExtResource( 2 )
normal_map = SubResource( 3 )

[node name="StaticBody2D" parent="PlayerTracker/LeftMargin" instance=ExtResource( 3 )]
visible = false
scale = Vector2( 0.0497176, 0.049926 )

[node name="Sun" type="Sprite" parent="PlayerTracker"]
position = Vector2( -431, -229 )
scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 6 )

[node name="Rays" type="Sprite" parent="PlayerTracker/Sun"]
texture = ExtResource( 5 )

[node name="Man" type="Sprite" parent="PlayerTracker"]
position = Vector2( -428, 245 )
rotation = -1.5708
scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 10 )
script = SubResource( 9 )

[node name="ManHUD" type="AnimationPlayer" parent="PlayerTracker/Man"]
anims/ManRun = SubResource( 10 )
anims/RESET = SubResource( 11 )

[node name="SunHUD" type="AnimationPlayer" parent="PlayerTracker/Man"]
anims/RESET = SubResource( 12 )
anims/SunRotate = SubResource( 13 )

[node name="RightMargin" type="Sprite" parent="PlayerTracker"]
modulate = Color( 0.372549, 0.372549, 0.372549, 1 )
position = Vector2( 429, 0 )
scale = Vector2( 172, 600 )
texture = ExtResource( 2 )

[node name="StaticBody2D" parent="PlayerTracker/RightMargin" instance=ExtResource( 3 )]
visible = false
scale = Vector2( 0.0497176, 0.0499259 )

[node name="Spawner" parent="PlayerTracker" instance=ExtResource( 4 )]

[node name="Time" type="Label" parent="PlayerTracker"]
margin_left = 351.0
margin_top = 224.0
margin_right = 496.0
margin_bottom = 277.0
text = "\"00:00:00\""
script = SubResource( 8 )

[node name="ParallaxBackground" type="ParallaxBackground" parent="PlayerTracker"]
layer = -1

[node name="Background" type="Sprite" parent="PlayerTracker/ParallaxBackground"]
modulate = Color( 0.447059, 1, 0.996078, 1 )
position = Vector2( 519, 302 )
scale = Vector2( 765, 604 )
texture = ExtResource( 2 )
script = SubResource( 4 )

[node name="ParallaxLayer" type="ParallaxLayer" parent="PlayerTracker/ParallaxBackground"]
motion_mirroring = Vector2( 0, 1000 )

[node name="Sprite" type="Sprite" parent="PlayerTracker/ParallaxBackground/ParallaxLayer"]
texture = ExtResource( 9 )
script = SubResource( 7 )

[node name="Despawner" type="Area2D" parent="PlayerTracker"]
position = Vector2( 4, 476 )
collision_layer = 0
collision_mask = 6
script = SubResource( 6 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="PlayerTracker/Despawner"]
position = Vector2( 0, 311 )
shape = SubResource( 5 )

[node name="Props" type="Node2D" parent="."]

[node name="Sand" type="Sprite" parent="Props"]
position = Vector2( 2, 170 )
scale = Vector2( 0.680002, 0.4 )
texture = ExtResource( 8 )

[node name="Umbrella" type="Sprite" parent="Props"]
position = Vector2( 145, 247 )
scale = Vector2( 0.140271, 0.140271 )
texture = ExtResource( 7 )

[node name="Sun" type="Sprite" parent="Props"]
position = Vector2( 0, -100100 )
scale = Vector2( 0.661911, 0.661911 )
texture = ExtResource( 6 )

[node name="Sprite" type="Sprite" parent="Props/Sun"]
texture = ExtResource( 5 )

[node name="Player" parent="." instance=ExtResource( 1 )]

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource( 12 )
volume_db = -7.0
autoplay = true
max_distance = 150000.0
attenuation = 0.0717937

[connection signal="area_entered" from="PlayerTracker/Despawner" to="PlayerTracker/Despawner" method="_on_Despawner_area_entered"]
[connection signal="body_entered" from="PlayerTracker/Despawner" to="PlayerTracker/Despawner" method="_on_Despawner_body_entered"]
